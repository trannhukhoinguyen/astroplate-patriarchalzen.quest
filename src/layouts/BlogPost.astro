---
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { format } from "date-fns";
import Tags from "../components/Tags";
import readingTime from "reading-time";
import Views from "../components/Views";
import path from "path";

type Props = CollectionEntry<"blogs">["data"] & {
  content: string;
  slug: string;
};

const { title, date, imageURL, tags, content, slug } = Astro.props;

const time = readingTime(content);
const extension = path.extname(imageURL);
---

<article
  class="prose prose-lg prose-orange mx-auto w-full lg:prose-xl marker:text-primary prose-headings:font-secondary prose-headings:font-normal prose-a:text-primary prose-a:after:content-['â†—'] prose-blockquote:border-primary prose-blockquote:bg-primary/10 prose-blockquote:py-1 prose-img:aspect-video prose-img:w-full prose-img:rounded-md prose-img:bg-gray-500 prose-img:object-cover"
>
  <a
    href="/"
    class="not-prose flex items-center gap-1 text-sm text-text after:!content-none"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-arrow-left"
      ><path d="m12 19-7-7 7-7"></path><path d="M19 12H5"></path></svg
    >

    Back</a
  >

  {
    extension.includes("webm") ? (
      <video
        src={imageURL}
        width={1020}
        autoplay
        loop
        muted
        height={510}
        class="aspect-video w-full rounded-md object-cover"
        transition:name={title}
      />
    ) : (
      <Image
        width={1020}
        height={510}
        src={imageURL}
        alt={`${title} cover pic`}
        transition:name={title}
        class="aspect-video w-full rounded-md object-cover"
        loading="eager"
      />
    )
  }

  <h1>{title}</h1>

  <div class="mb-4 flex items-center justify-between text-gray-500">
    <time class="shrink-0">
      {format(new Date(date), "dd, LLL uuuu")}
    </time>

    <div class="flex items-center gap-6">
      <span class="flex items-center gap-1">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="size-6"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
        </svg>

        {time.text}
      </span>
    </div>
  </div>

  <Tags list={tags} />

  <slot />
</article>

<script>
  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  document.addEventListener("astro:page-load", () => {
    function attachCopyButtons() {
      const copyButtonLabel = "Copy ðŸ“‹";
      const codeBlocks = Array.from(document.querySelectorAll("pre"));

      for (const codeBlock of codeBlocks) {
        const wrapper = document.createElement("div");
        wrapper.style.position = "relative";

        const copyButton = document.createElement("button");
        copyButton.className =
          "copy-code absolute right-3 -top-4 rounded bg-primary p-2 text-base leading-4 text-skin-base font-medium";
        copyButton.innerHTML = copyButtonLabel;
        codeBlock.setAttribute("tabindex", "0");
        codeBlock.appendChild(copyButton);

        // wrap codebock with relative parent element
        codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);

        copyButton.addEventListener("click", async () => {
          await copyCode({ block: codeBlock, button: copyButton });
        });
      }

      async function copyCode({
        block,
        button,
      }: {
        block: HTMLPreElement;
        button: HTMLButtonElement;
      }) {
        const code = block.querySelector("code");
        const text = code?.innerText;

        await navigator.clipboard.writeText(text ?? "");

        // visual feedback that task is completed
        button.innerText = "Copied âœ…";

        setTimeout(() => {
          button.innerText = copyButtonLabel;
        }, 1000);
      }
    }

    attachCopyButtons();
  });
</script>
